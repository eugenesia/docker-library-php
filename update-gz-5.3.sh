#!/bin/bash
#
# This version is for updating PHP 5.4 and below since the keys and download
# files (use .gz not .xz) are different.
#
# Differences:
# - PHP >= 5.5: Download files - .xz, .gz, .bz2
# - PHP <= 5.4: Download files - .gz, .bz2
#
set -evx

declare -A gpgKeys=(
  # https://secure.php.net/gpg-keys.php#gpg-5.4
  # https://secure.php.net/releases/#5.4.45
  [5.4]='F38252826ACD957EF380D39F2F7956BC5DA04B5D F38252826ACD957EF380D39F2F7956BC5DA04B5D'

  # https://secure.php.net/gpg-keys.php#gpg-5.3
  # https://secure.php.net/releases/#5.3.29
  [5.3]='0A95E9A026542D53835E3F3A7DEC4E69FC9C83D7 0B96609E270F565C13292B24C13C70B87267B52D'
)
# see https://secure.php.net/downloads.php

cd "$(dirname "$(readlink -f "$BASH_SOURCE")")"

versions=( "$@" )
if [ ${#versions[@]} -eq 0 ]; then
	versions=( */ )
fi
versions=( "${versions[@]%/}" )

generated_warning() {
	cat <<-EOH
		#
		# NOTE: THIS DOCKERFILE IS GENERATED VIA "update.sh"
		#
		# PLEASE DO NOT EDIT IT DIRECTLY.
		#

	EOH
}

travisEnv=
for version in "${versions[@]}"; do
	rcVersion="${version%-rc}"

	# scrape the relevant API based on whether we're looking for pre-releases
	apiUrl="https://secure.php.net/releases/index.php?json&max=150&version=${rcVersion%%.*}"
	apiJqExpr='
		(keys[] | select(startswith("'"$rcVersion"'."))) as $version
		| [ $version, (
			.[$version].source[]
      | select(has("filename"))
			| select(.filename | endswith(".gz"))
			|
				"https://secure.php.net/get/" + .filename + "/from/this/mirror",
				"https://secure.php.net/get/" + .filename + ".asc/from/this/mirror",
				.sha256 // "",
				.md5 // ""
		) ]
	'
	if [ "$rcVersion" != "$version" ]; then
		apiUrl='https://qa.php.net/api.php?type=qa-releases&format=json'
		apiJqExpr='
			.releases[]
			| select(.version | startswith("7.1."))
			| [
				.version,
				.files.gz.path // "",
				"",
				.files.gz.sha256 // "",
				.files.gz.md5 // ""
			]
		'
	fi
	IFS=$'\n'
	possibles=( $(
		curl -fsSL "$apiUrl" \
			| jq --raw-output "$apiJqExpr | @sh" \
			| sort -rV
	) )
	unset IFS

	if [ "${#possibles[@]}" -eq 0 ]; then
		echo >&2
		echo >&2 "error: unable to determine available releases of $version"
		echo >&2
		exit 1
	fi

	# format of "possibles" array entries is "VERSION URL.TAR.XZ URL.TAR.XZ.ASC SHA256 MD5" (each value shell quoted)
	#   see the "apiJqExpr" values above for more details
	eval "possi=( ${possibles[0]} )"
	fullVersion="${possi[0]}"
	url="${possi[1]}"
	ascUrl="${possi[2]}"
	sha256="${possi[3]}"
	md5="${possi[4]}"

	gpgKey="${gpgKeys[$rcVersion]}"
	if [ -z "$gpgKey" ]; then
		echo >&2 "ERROR: missing GPG key fingerprint for $version"
		echo >&2 "  try looking on https://secure.php.net/downloads.php#gpg-$version"
		exit 1
	fi

	# if we don't have a .asc URL, let's see if we can figure one out :)
	if [ -z "$ascUrl" ] && wget -q --spider "$url.asc"; then
		ascUrl="$url.asc"
	fi

	dockerfiles=()

	{ generated_warning; cat Dockerfile-debian-gz-5.3.template; } > "$version/Dockerfile"
	cp -v \
		docker-php-entrypoint \
		docker-php-ext-* \
		docker-php-source-gz \
		"$version/"
  # Rename docker-php-source-gz to former name so other scripts work.
  mv $version/docker-php-source-gz $version/docker-php-source
	dockerfiles+=( "$version/Dockerfile" )

	if [ -d "$version/alpine" ]; then
		{ generated_warning; cat Dockerfile-alpine-gz.template; } > "$version/alpine/Dockerfile"
		cp -v \
			docker-php-entrypoint \
			docker-php-ext-* \
			docker-php-source-gz \
			"$version/alpine/"
    # Rename docker-php-source-gz to former name so other scripts work.
    mv $version/alpine/docker-php-source-gz $version/docker-php-source
		dockerfiles+=( "$version/alpine/Dockerfile" )
	fi

	for target in \
		apache \
		fpm fpm/alpine \
		zts zts/alpine \
	; do
		[ -d "$version/$target" ] || continue
		base="$version/Dockerfile"
		variant="${target%%/*}"
		if [ "$target" != "$variant" ]; then
			variantVariant="${target#$variant/}"
			[ -d "$version/$variantVariant" ] || continue
			base="$version/$variantVariant/Dockerfile"
		fi
		echo "Generating $version/$target/Dockerfile from $base + $variant-Dockerfile-block-*"
		awk '
			$1 == "##</autogenerated>##" { ia = 0 }
			!ia { print }
			$1 == "##<autogenerated>##" { ia = 1; ab++; ac = 0 }
			ia { ac++ }
			ia && ac == 1 { system("cat '$variant'-Dockerfile-block-" ab) }
		' "$base" > "$version/$target/Dockerfile"
		cp -v \
			docker-php-entrypoint \
			docker-php-ext-* \
			docker-php-source-gz \
			"$version/$target/"
    # Rename docker-php-source-gz to former name so other scripts work.
    mv $version/$target/docker-php-source-gz $version/$target/docker-php-source
		dockerfiles+=( "$version/$target/Dockerfile" )
	done

	(
		set -x
		sed -ri \
			-e 's!%%PHP_VERSION%%!'"$fullVersion"'!' \
			-e 's!%%GPG_KEYS%%!'"$gpgKey"'!' \
			-e 's!%%PHP_URL%%!'"$url"'!' \
			-e 's!%%PHP_ASC_URL%%!'"$ascUrl"'!' \
			-e 's!%%PHP_SHA256%%!'"$sha256"'!' \
			-e 's!%%PHP_MD5%%!'"$md5"'!' \
			"${dockerfiles[@]}"
	)

	# update entrypoint commands
	for dockerfile in "${dockerfiles[@]}"; do
		cmd="$(awk '$1 == "CMD" { $1 = ""; print }' "$dockerfile" | tail -1 | jq --raw-output '.[0]')"
		entrypoint="$(dirname "$dockerfile")/docker-php-entrypoint"
		sed -i 's! php ! '"$cmd"' !g' "$entrypoint"
	done

	newTravisEnv=
	for dockerfile in "${dockerfiles[@]}"; do
		dir="${dockerfile%Dockerfile}"
		dir="${dir%/}"
		variant="${dir#$version}"
		variant="${variant#/}"
		newTravisEnv+='\n  - VERSION='"$version VARIANT=$variant"
	done
	travisEnv="$newTravisEnv$travisEnv"
done

travis="$(awk -v 'RS=\n\n' '$1 == "env:" { $0 = "env:'"$travisEnv"'" } { printf "%s%s", $0, RS }' .travis.yml)"
echo "$travis" > .travis.yml
